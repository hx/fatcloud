// FatCloud (c) 2009 FatPublisher Pty. Ltd.// Written by Neil E. Pearson <neil@helium.net.au>package  {		import flash.display.*;	import flash.events.Event;	import flash.events.ErrorEvent;	import flash.system.Security;	import flash.external.ExternalInterface;	import flash.utils.getDefinitionByName;	import flash.xml.*;	import flash.net.*;	import Skins.*;	import Fonts.*;		public class FatCloud extends Sprite {				//	In all its wisedom, Flash won't compile SWFs with classes that aren't explicitly		//	used in code. Therefore, we have to create dummy variables for each skin, so		//	that they're included in the compile.				private var dummySimpleSkin:SimpleSkin=null;		private var dummyWordle:Wordle=null;				private static const defaultSkin:String='SimpleSkin';				public static var params:Object;		public static var tags:Array;		public static var options:Object={};		public static var skin; // to be assigned an instance of a class which extends FatCloudSkin		public static var fonts:Array=[];				public static var instance:FatCloud;				public function FatCloud() {						removeChild(txtInfo);						instance=this;						stage.scaleMode=StageScaleMode.NO_SCALE;			stage.align=StageAlign.TOP_LEFT;			stage.addEventListener(Event.RESIZE,onResize);			flash.system.Security.allowDomain("*");			params=root.loaderInfo.parameters;						tags=ExternalInterface.call('fatCloud.getTagsFromDOM',params.id);			options=ExternalInterface.call('fatCloud.getCloudOptions',params.id);			fonts=ExternalInterface.call('fatCloud.getFontList');						if(params['xml']) {								// load defaults from XML file								var loader:URLLoader=new URLLoader();				loader.addEventListener(Event.COMPLETE, function(e:Event) {										var xml:XML=new XML(e.target.data);					var defaults:Object=new Object();										for each(var i:XML in xml.skins.skin.(shortName==params.skin).options.option)						defaults[i.shortName.toString()]=i.default.toString();										for(var k:String in defaults) if(!(k in options)) options[k]=defaults[k];										for each(i in xml.fonts.font) if(fonts.indexOf(i.toString())==-1) fonts.push(i.toString());										instance.loadSkin();									});								loader.load(new URLRequest(params.xml));							} else loadSkin();								}				public function loadSkin() {									// add scale property to tags. 0 = smallest, 1 = biggest.			var min:Number=100000;			var max:Number=0;			var i:uint;			for(i=0;i<tags.length;i++) {				min=Math.min(min,tags[i].size);				max=Math.max(max,tags[i].size);			}			if(max==min) min--;			for(i=0;i<tags.length;i++) {				tags[i].scale=(tags[i].size-min)/(max-min);				tags[i].scale*=0.8;				tags[i].scale+=Math.random()*0.2;			}						// if no skin specified, use the default:			if(typeof params['skin']=='undefined') params.skin=defaultSkin;			try {								var cls:Class=getDefinitionByName('Skins.'+params.skin) as Class;				skin=new cls();							} catch(e:Error) {								// invalid skin was specified. use default.				cls=getDefinitionByName('Skins.'+defaultSkin) as Class;				skin=new cls();							}						// add the skin to the stage.			instance.addChild(skin);						// set up DOM event handler			ExternalInterface.addCallback('DOMTagEvent',skin.dispatchDOMTagEvent);						// render the skin			if(!skin.firstRender) instance.onResize();					}				public function onResize(e:Event=null) {			if(stage.stageWidth==0||stage.stageHeight==0) return false;			if('render' in skin) {				skin.render();				skin.firstRender=true;			}		}				public static function debug(val) {			ExternalInterface.call('fatCloud.debug',val);		}				// helper function for skins: colour hex string to uint		public static function colorVal(str:String):uint {			str=str.replace(/[^\da-f]+/ig,'');			if(str.length==1) str='0'+str;			if(str.length==2) str=str+str+str;			if(str.length==3) str=str.replace(/(.)(.)(.)/,'\1\1\2\2\3\3');			return parseInt(str,16);		}				// helper function: get font name from library font		public static function fontName(fontClassName:String):String {			try {				var cls:Class=getDefinitionByName('Fonts.'+fontClassName.replace(/ /g,'_')) as Class;				var fnt=new cls();				return fnt.fontName;			} catch(e:Error) {			}			return fontClassName;		}	}	}