// All FatCloud Skins need to be in the Skins package.package Skins {		import flash.events.MouseEvent;		// All FatCloud Skins need to extend the FatCloudSkin class.	public class SimpleSkin extends FatCloudSkin {				var tags=[];						// constructor functions are optional, and generally		// you will only need them to set up event listeners.		public function SimpleSkin() {						addEventListener(DOMTagEvent.FOCUS, receiveDOMTagEvent);			addEventListener(DOMTagEvent.BLUR, receiveDOMTagEvent);				}				// If declared, the render() function will be called		// after the skin is constructed, and subsequently		// every time the SWF is resized. It's a good idea to		// optimize the speed of this function by not having it		// completely re-draw the canvas; where possible, try		// to move/resize/shuffle your tags around instead.		public function render() {						var i:uint;			var tag:SimpleSkinTag;			var cX:Number=0, cY:Number=0; // cursor position						var fgColor:uint=FatCloud.colorVal(FatCloud.options.fgColor);									// draw background			with(graphics) {				clear();				beginFill(FatCloud.colorVal(FatCloud.options.bgColor));				drawRect(0,0,stage.stageWidth,stage.stageHeight);				endFill();			}						// test if any tags have been rendered yet.			if(!tags.length) {				// create tags				for(i=0;i<FatCloud.tags.length;i++) {					tag=new SimpleSkinTag(FatCloud.tags[i].label,fgColor);					tag.alpha=FatCloud.tags[i].scale/2+0.5;					tags.push(tag);					tag.y=-5000;					tag.tagIndex=i;					tag.addEventListener(MouseEvent.MOUSE_OVER,tagMouseEvent);					tag.addEventListener(MouseEvent.MOUSE_OUT,tagMouseEvent);					tag.addEventListener(MouseEvent.MOUSE_DOWN,tagMouseEvent);					addChild(tag);				}			}					// position tags			for(i=0;i<tags.length;i++) {				if(cX+tags[i].width>stage.stageWidth&&i) {					// wrap to next line					cX=0;					cY+=tags[i].height;				}				tags[i].x=cX;				tags[i].y=cY;				cX+=tags[i].width;			}					}				function receiveDOMTagEvent(e:DOMTagEvent) {			if(e.type==DOMTagEvent.FOCUS) tags[e.tagIndex].focus(true);			if(e.type==DOMTagEvent.BLUR) tags[e.tagIndex].focus(false);		}				function tagMouseEvent(e:MouseEvent) {			var tag=e.target, i:uint;			while(!(tag is SimpleSkinTag)) tag=tag.parent;			switch(e.type) {				case MouseEvent.MOUSE_OVER:					for(i=0;i<tags.length;i++) tags[i].focus(tags[i]===tag);					tagFocus(tag.tagIndex);				break;				case MouseEvent.MOUSE_OUT:					tag.focus(false);					tagBlur(tag.tagIndex);				break;				case MouseEvent.MOUSE_DOWN:					tagSelect(tag.tagIndex);				break;			}		}			}	}import flash.display.*;import flash.text.*;import Fonts.*;internal class SimpleSkinTag extends Sprite {		var label:TextField;	var format:TextFormat;	var highlight:Sprite;	public var tagIndex:uint;		function SimpleSkinTag(txt:String, color:uint) {		buttonMode=useHandCursor=true;				var f:Expressway=new Expressway();		trace(f.fontName);		format=new TextFormat();		FatCloud.debug(FatCloud.options);		format.font=FatCloud.fontName(FatCloud.options.font);		format.color=color;		format.align=TextFormatAlign.LEFT;		format.size=FatCloud.options.fontSize;		label=new TextField;		label.antiAliasType=AntiAliasType.ADVANCED;		label.sharpness=-150;		label.thickness=10;		label.embedFonts=true;		label.multiline=false;		label.textColor=color;		label.selectable=false;		label.wordWrap=false;		label.defaultTextFormat=format;		label.autoSize=TextFieldAutoSize.LEFT;				label.text=txt;				addChild(label);				highlight=new Sprite();		highlight.alpha=0;		addChild(highlight);		var g:Graphics=highlight.graphics;		g.beginFill(0x8dc8);		g.drawRect(0,0,label.width,label.height);		g.endFill();				}		function focus(hasFocus:Boolean) {		highlight.alpha=hasFocus?0.3:0;	}	}